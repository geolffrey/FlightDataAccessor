import os
import shutil
import unittest
import tempfile

import h5py
import numpy as np

from flightdataaccessor.formats.hdf import FlightDataFile
from flightdataaccessor.datatypes.parameter import Parameter


class FlightDataFileTest(unittest.TestCase):
    test_fn = 'data/flight_data_v2.hdf5'

    def setUp(self):
        self.tempdir = tempfile.mkdtemp()
        curr_dir = os.path.dirname(__file__)
        self.fp = os.path.join(self.tempdir, os.path.basename(self.test_fn))
        shutil.copy(os.path.join(curr_dir, self.test_fn), self.fp)

    def tearDown(self):
        shutil.rmtree(self.tempdir)

    def keys_test(self):
        """
        Compare keys() with raw HDF5 keys() before and after adding a parameter
        """
        with h5py.File(self.fp, mode='r') as hdf:
            hdf_series_names = hdf['series'].keys()

        with FlightDataFile(self.fp) as fdf:
            old_keys = fdf.keys()
            self.assertEquals(hdf_series_names, old_keys)

            self.assertNotIn('Test', old_keys)
            param = Parameter('Test', array=np.ma.arange(1000))
            fdf.set_parameter(param)
            new_keys = fdf.keys()
            self.assertIn('Test', new_keys)

        with h5py.File(self.fp, mode='r') as hdf:
            hdf_series_names = hdf['series'].keys()
            self.assertIn('Test', hdf_series_names)
            self.assertEquals(hdf_series_names, new_keys)

    def values_test(self):
        """
        Compare parameter names extracted with values() with raw HDF5 keys() (series names) before and after adding a
        parameter.
        """
        with h5py.File(self.fp, mode='r') as hdf:
            hdf_series_names = hdf['series'].keys()

        with FlightDataFile(self.fp) as fdf:
            fdf_param_names = (p.name for p in fdf.values())
            self.assertItemsEqual(hdf_series_names, fdf_param_names)

            param = Parameter('Test', array=np.ma.arange(1000))
            self.assertNotIn(param.name, fdf_param_names)
            fdf.set_parameter(param)
            fdf_param_names = (p.name for p in fdf.values())

        with h5py.File(self.fp, mode='r') as hdf:
            hdf_series_names = (hdf['series'].keys())

        self.assertIn(param.name, hdf_series_names)

    def items_test(self):
        """
        Compare parameter names extracted with values() with raw HDF5 keys() (series names) before and after adding a
        parameter.
        """
        with h5py.File(self.fp, mode='r') as hdf:
            hdf_series_names = set(hdf['series'].keys())

        with FlightDataFile(self.fp) as fdf:
            param_names = set()
            for param_name, param in fdf.items():
                self.assertEquals(param_name, param.name)
                self.assertIn(param_name, hdf_series_names)
                param_names.add(param_name)

        self.assertEquals(param_names, hdf_series_names)

    def close_test(self):
        """
        Verify that HDF file is closed on FlightDataFile.close()
        """
        fdf = FlightDataFile(self.fp)
        fdf.keys()

        fdf.close()
        # h5py raises ValueError on access to closed file
        with self.assertRaises(ValueError):
            fdf.keys()

    def get_parameter_test(self):
        array = np.ma.arange(1000)
        param = Parameter('Test', array=array)
        with FlightDataFile(self.fp) as fdf:
            fdf.set_parameter(param)

        with FlightDataFile(self.fp) as fdf:
            param = fdf.get_parameter('Test')
            self.assertTrue(np.all(param.array==array))

    def set_parameter_test(self):
        """
        Set parameter, compare with raw data in HDF5
        """
        array = np.ma.arange(1000)
        param = Parameter('Test', array=array)
        with FlightDataFile(self.fp) as fdf:
            fdf.set_parameter(param)

        with h5py.File(self.fp, mode='r') as hdf:
            data = hdf['series']['Test']['data']
            self.assertTrue(np.all(param.array==data))

    def delete_parameter_test(self):
        with FlightDataFile(self.fp) as fdf:
            self.assertIn('Airspeed', fdf)
            fdf.delete_parameter('Airspeed')

        with FlightDataFile(self.fp) as fdf:
            self.assertNotIn('Airspeed', fdf)


    def get_parameters_test(self):
        parameter_names = ('Airspeed', 'Heading True')
        with FlightDataFile(self.fp) as fdf:
            parameters = fdf.get_parameters(parameter_names)

        self.assertItemsEqual(parameter_names, (p.name for p in parameters))

    def set_parameters_test(self):
        # TODO: set multiple parameters
        pass

    def delete_parameters_test(self):
        # TODO: delete multiple parameters
        pass
